import { instantiate } from "../wabt-wrapper.js"
import * as assert from "../assert.js"

let wat = `
(module
    (func $callee (param i32)
        (result i32)
        (result i32)
        (result i32)
        (result i32)
        (result i32)
        (result i32)
        (result i32)
        (result i32)
        (result i32)
        (result i32)

        (i32.const 1)
        (i32.const 2)
        (i32.const 3)
        (i32.const 4)
        (i32.const 5)
        (i32.const 6)
        (i32.const 7)
        (i32.const 8)
        (i32.const 9)
        (i32.const 10)
        (return)
    )
    (func $callee2 (param i32)
        (result i32)
        (result i32)
        (result i32)
        (result i32)
        (result i32)
        (result i32)
        (result i32)
        (result i32)
        (result i32)
        (result i32)
        (result i32)

        (i32.const 1)
        (i32.const 2)
        (i32.const 3)
        (i32.const 4)
        (i32.const 5)
        (i32.const 6)
        (i32.const 7)
        (i32.const 8)
        (i32.const 9)
        (i32.const 10)
        (i32.const 11)
        (return)
    )
    (func (export "test") (result i32)
        (i32.const 1)
        (call $callee)
        (i32.add)
        (i32.add)
        (i32.add)
        (i32.add)
        (i32.add)
        (i32.add)
        (i32.add)
        (i32.add)
        (i32.add)
        (return)
    )
    (func (export "test2") (result i32)
        (i32.const 1)
        (call $callee2)
        (i32.add)
        (i32.add)
        (i32.add)
        (i32.add)
        (i32.add)
        (i32.add)
        (i32.add)
        (i32.add)
        (i32.add)
        (i32.add)
        (return)
    )
)
`

async function test() {
    const instance = await instantiate(wat, {});
    const { test, test2 } = instance.exports
    assert.eq(test(), 55)
    assert.eq(test2(), 66)
}

await assert.asyncTest(test())
