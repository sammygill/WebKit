# Copyright (C) 2024 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#if HAVE(WK_SECURE_CODING_NSURLCREDENTIAL)
webkit_platform_headers: "CoreIPCNSURLCredential.h"

header: "CoreIPCNSURLCredential.h"
[CustomHeader, WebKitPlatform] enum class WebKit::CoreIPCNSURLCredentialPersistence : uint8_t {
    None,
    Session,
    Permanent,
    Synchronizable
};

header: "CoreIPCNSURLCredential.h"
[CustomHeader, WebKitPlatform] enum class WebKit::CoreIPCNSURLCredentialType : uint8_t {
    Password,
    ServerTrust,
    KerberosTicket,
    XMobileMeAuthToken,
    OAuth2
};

using WebKit::CoreIPCNSURLCredentialData::Flags = std::pair<WebKit::CoreIPCString, WebKit::CoreIPCString>;
using WebKit::CoreIPCNSURLCredentialData::Attributes = std::pair<WebKit::CoreIPCString, std::variant<WebKit::CoreIPCNumber, WebKit::CoreIPCString, WebKit::CoreIPCDate>>;

header: "CoreIPCNSURLCredential.h"
[CustomHeader, WebKitPlatform] struct WebKit::CoreIPCNSURLCredentialData {
    WebKit::CoreIPCNSURLCredentialPersistence persistence;
    WebKit::CoreIPCNSURLCredentialType type;
    std::optional<WebKit::CoreIPCString> user;
    std::optional<WebKit::CoreIPCString> password;
    std::optional<Vector<WebKit::CoreIPCNSURLCredentialData::Attributes>> attributes;
    std::optional<WebKit::CoreIPCString> identifier;
    std::optional<bool> useKeychain;
    WebKit::CoreIPCSecTrust trust;
    std::optional<WebKit::CoreIPCString> service;
    std::optional<Vector<WebKit::CoreIPCNSURLCredentialData::Flags>> flags;
    std::optional<WebKit::CoreIPCString> uuid;
    std::optional<WebKit::CoreIPCString> appleID;
    std::optional<WebKit::CoreIPCString> realm;
    std::optional<WebKit::CoreIPCString> token;
};
[WebKitPlatform] class WebKit::CoreIPCNSURLCredential {
    WebKit::CoreIPCNSURLCredentialData m_data
}
#endif

#if !HAVE(WK_SECURE_CODING_NSURLCREDENTIAL) && HAVE(DICTIONARY_SERIALIZABLE_NSURLCREDENTIAL)
[SupportWKKeyedCoder] webkit_secure_coding NSURLCredential {
    __nsurlcredential_proto_plist: Dictionary
}
#endif

#if !HAVE(WK_SECURE_CODING_NSURLCREDENTIAL) && !HAVE(DICTIONARY_SERIALIZABLE_NSURLCREDENTIAL)
webkit_platform_headers: "CoreIPCNSURLCredential.h"
[WebKitPlatform] class WebKit::CoreIPCNSURLCredential {
    RetainPtr<NSData> m_serializedBytes;
}
#endif
